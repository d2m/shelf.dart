{"name":"shelf","qualifiedName":"shelf/shelf","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"logRequests":{"name":"logRequests","qualifiedName":"shelf/shelf.logRequests","comment":"<p>Middleware which prints the time of the request, the elapsed time for the\ninner handlers, the response's status code and the request URI.</p>\n<p><a>shelf/shelf.logRequests.logger</a> takes two paramaters.</p>\n<p><code>msg</code> includes the request time, duration, request method, and requested\npath.</p>\n<p>For successful requests, <code>msg</code> also includes the status code.</p>\n<p>When an error is thrown, <code>isError</code> is true and <code>msg</code> contains the error\ndescription and stack trace.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"shelf/shelf.ShelfMiddleware","inner":[]}],"parameters":{"logger":{"name":"logger","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"createMiddleware":{"name":"createMiddleware","qualifiedName":"shelf/shelf.createMiddleware","comment":"<p>Creates a <a>shelf/shelf.ShelfMiddleware</a> using the provided functions.</p>\n<p>If provided, <a>shelf/shelf.createMiddleware.requestHandler</a> receives a <a>shelf/shelf.ShelfRequest</a>. It can respond to\nthe request by returning a <a>shelf/shelf.ShelfResponse</a> or Future&lt;ShelfResponse>.\n<a>shelf/shelf.createMiddleware.requestHandler</a> can also return <code>null</code> for some or all requests in which\ncase the request is sent to the inner <a>shelf/shelf.ShelfHandler</a>.</p>\n<p>If provided, <a>shelf/shelf.createMiddleware.responseHandler</a> is called with the <a>shelf/shelf.ShelfResponse</a> generated\nby the inner <a>shelf/shelf.ShelfHandler</a>. Responses generated by <a>shelf/shelf.createMiddleware.requestHandler</a> are not\nsent to <a>shelf/shelf.createMiddleware.responseHandler</a>.</p>\n<p><a>shelf/shelf.createMiddleware.responseHandler</a> should return either a <a>shelf/shelf.ShelfResponse</a> or\nFuture&lt;ShelfResponse>. It may return the response parameter it receives or\ncreate a new response object.</p>\n<p>If provided, <a>shelf/shelf.createMiddleware.errorHandler</a> receives errors thrown by the inner handler. It\ndoes not receive errors thrown by <a>shelf/shelf.createMiddleware.requestHandler</a> or <a>shelf/shelf.createMiddleware.responseHandler</a>. It\ncan either return a new response or throw an error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"shelf/shelf.ShelfMiddleware","inner":[]}],"parameters":{"requestHandler":{"name":"requestHandler","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]},"responseHandler":{"name":"responseHandler","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]},"errorHandler":{"name":"errorHandler","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"ShelfRequest","qualifiedName":"shelf/shelf.ShelfRequest","preview":"<p>Represents an HTTP request to be processed by a Shelf application.</p>"},{"name":"ShelfResponse","qualifiedName":"shelf/shelf.ShelfResponse","preview":"<p>The response returned by a ShelfHandler.</p>"},{"name":"ShelfStack","qualifiedName":"shelf/shelf.ShelfStack","preview":"<p>A helper that makes it easy to compose a set of <a>shelf/shelf.ShelfMiddleware</a> and a\n<a>shelf/shelf.ShelfHandler</a>.</p>"}],"typedef":{"ShelfMiddleware":{"name":"ShelfMiddleware","qualifiedName":"shelf/shelf.ShelfMiddleware","comment":"<p>A function which creates a new [ShelfHandler] by wrapping a [ShelfHandler].</p>\n<p>You can extend the functions of a [ShelfHandler] by wrapping it in\n[ShelfMiddleware] that can intercept and process a request before it it sent\nto a handler, a response after it is sent by a handler, or both.</p>\n<p>Because [ShelfMiddleware] consumes a [ShelfHandler] and returns a new\n[ShelfHandler], multiple [ShelfMiddleware] instances can be composed\ntogether to offer rich functionality.</p>\n<p>Common uses for middleware include caching, logging, and authentication.</p>\n<p>A simple [ShelfMiddleware] can be created using [createMiddleware].</p>","return":"shelf-typedef.ShelfHandler","parameters":{"innerHandler":{"name":"innerHandler","optional":false,"named":false,"default":false,"type":[{"outer":"shelf/shelf.ShelfHandler","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{},"preview":"<p>A function which creates a new [ShelfHandler] by wrapping a [ShelfHandler].</p>"},"ShelfHandler":{"name":"ShelfHandler","qualifiedName":"shelf/shelf.ShelfHandler","comment":"<p>The signature of a function which handles a [ShelfRequest].</p>\n<p>A [ShelfHandler] may receive a request directly from an HTTP server or it\nmay be composed as part of a larger application.</p>\n<p>Should return [ShelfResponse] or [Future<ShelfResponse>].</p>","return":"dynamic","parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"shelf/shelf.ShelfRequest","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{},"preview":"<p>The signature of a function which handles a [ShelfRequest].</p>"}},"error":[]},"packageName":"shelf","packageIntro":"<h1>Shelf</h1>\n<h3>Web Server Middleware for Dart</h3>\n<p><a href=\"https://drone.io/github.com/kevmoo/shelf.dart/latest\">!<a href=\"https://drone.io/github.com/kevmoo/shelf.dart/status.png\">Build Status</a></a></p>\n<p>See <a href=\"https://docs.google.com/document/d/1nwmM4_z4QWLKl4-NaFK6yow8FNmlfo4HYtY0V0EozWs/edit?usp=sharing\">DesignDoc</a></p>"}