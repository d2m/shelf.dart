{"name":"ShelfResponse","qualifiedName":"shelf/shelf.ShelfResponse","comment":"<p>The response returned by a ShelfHandler.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"statusCode":{"name":"statusCode","qualifiedName":"shelf/shelf.ShelfResponse.statusCode","comment":"<p>The HTTP status code of the response.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"headers":{"name":"headers","qualifiedName":"shelf/shelf.ShelfResponse.headers","comment":"<p>The HTTP headers of the response.</p>\n<p>The value is immutable.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"mimeType":{"name":"mimeType","qualifiedName":"shelf/shelf.ShelfResponse.mimeType","comment":"<p>The MIME type of the response.</p>\n<p>This is parsed from the Content-Type header in <a>shelf/shelf.ShelfResponse.headers</a>. It contains only\nthe MIME type, without any Content-Type parameters.</p>\n<p>If <a>shelf/shelf.ShelfResponse.headers</a> doesn't have a Content-Type header, this will be <code>null</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"encoding":{"name":"encoding","qualifiedName":"shelf/shelf.ShelfResponse.encoding","comment":"<p>The encoding of the response.</p>\n<p>This is parsed from the \"charset\" paramater of the Content-Type header in\n<a>shelf/shelf.ShelfResponse.headers</a>.</p>\n<p>If <a>shelf/shelf.ShelfResponse.headers</a> doesn't have a Content-Type header or it specifies an\nencoding that dart:convert doesn't support, this will be <code>null</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Encoding","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"ok":{"name":"ok","qualifiedName":"shelf/shelf.ShelfResponse.ShelfResponse-ok","comment":"<p>Constructs a 200 OK response.</p>\n<p>This indicates that the request has succeeded.</p>\n<p><a>shelf/shelf.ShelfResponse.ShelfResponse-ok.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's a <a>dart-core.String</a>,\n<a>shelf/shelf.ShelfResponse.ShelfResponse-ok.encoding</a> is used to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to\nUTF-8.</p>\n<p>If <a>shelf/shelf.ShelfResponse.ShelfResponse-ok.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.ShelfResponse.ShelfResponse-ok.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"movedPermanently":{"name":"movedPermanently","qualifiedName":"shelf/shelf.ShelfResponse.ShelfResponse-movedPermanently","comment":"<p>Constructs a 301 Moved Permanently response.</p>\n<p>This indicates that the requested resource has moved permanently to a new\nURI. <a>shelf/shelf.ShelfResponse.ShelfResponse-movedPermanently.location</a> is that URI; it can be either a <a>dart-core.String</a> or a <a>dart-core.Uri</a>. It's\nautomatically set as the Location header in <a>shelf/shelf.ShelfResponse.ShelfResponse-movedPermanently.headers</a>.</p>\n<p><a>shelf/shelf.ShelfResponse.ShelfResponse-movedPermanently.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's a <a>dart-core.String</a>,\n<a>shelf/shelf.ShelfResponse.ShelfResponse-movedPermanently.encoding</a> is used to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to\nUTF-8.</p>\n<p>If <a>shelf/shelf.ShelfResponse.ShelfResponse-movedPermanently.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.ShelfResponse.ShelfResponse-movedPermanently.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"location":{"name":"location","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"body":{"name":"body","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"found":{"name":"found","qualifiedName":"shelf/shelf.ShelfResponse.ShelfResponse-found","comment":"<p>Constructs a 302 Found response.</p>\n<p>This indicates that the requested resource has moved temporarily to a new\nURI. <a>shelf/shelf.ShelfResponse.ShelfResponse-found.location</a> is that URI; it can be either a <a>dart-core.String</a> or a <a>dart-core.Uri</a>. It's\nautomatically set as the Location header in <a>shelf/shelf.ShelfResponse.ShelfResponse-found.headers</a>.</p>\n<p><a>shelf/shelf.ShelfResponse.ShelfResponse-found.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's a <a>dart-core.String</a>,\n<a>shelf/shelf.ShelfResponse.ShelfResponse-found.encoding</a> is used to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to\nUTF-8.</p>\n<p>If <a>shelf/shelf.ShelfResponse.ShelfResponse-found.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.ShelfResponse.ShelfResponse-found.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"location":{"name":"location","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"body":{"name":"body","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"seeOther":{"name":"seeOther","qualifiedName":"shelf/shelf.ShelfResponse.ShelfResponse-seeOther","comment":"<p>Constructs a 303 See Other response.</p>\n<p>This indicates that the response to the request should be retrieved using\na GET request to a new URI. <a>shelf/shelf.ShelfResponse.ShelfResponse-seeOther.location</a> is that URI; it can be either a\n<a>dart-core.String</a> or a <a>dart-core.Uri</a>. It's automatically set as the Location header in\n<a>shelf/shelf.ShelfResponse.ShelfResponse-seeOther.headers</a>.</p>\n<p><a>shelf/shelf.ShelfResponse.ShelfResponse-seeOther.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's a <a>dart-core.String</a>,\n<a>shelf/shelf.ShelfResponse.ShelfResponse-seeOther.encoding</a> is used to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to\nUTF-8.</p>\n<p>If <a>shelf/shelf.ShelfResponse.ShelfResponse-seeOther.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.ShelfResponse.ShelfResponse-seeOther.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"location":{"name":"location","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"body":{"name":"body","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"notModified":{"name":"notModified","qualifiedName":"shelf/shelf.ShelfResponse.ShelfResponse-notModified","comment":"<p>Constructs a 304 Not Modified response.</p>\n<p>This is used to respond to a conditional GET request that provided\ninformation used to determine whether the requested resource has changed\nsince the last request. It indicates that the resource has not changed and\nthe old value should be used.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"forbidden":{"name":"forbidden","qualifiedName":"shelf/shelf.ShelfResponse.ShelfResponse-forbidden","comment":"<p>Constructs a 403 Forbidden response.</p>\n<p>This indicates that the server is refusing to fulfill the request.</p>\n<p><a>shelf/shelf.ShelfResponse.ShelfResponse-forbidden.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's a <a>dart-core.String</a>,\n<a>shelf/shelf.ShelfResponse.ShelfResponse-forbidden.encoding</a> is used to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to\nUTF-8.</p>\n<p>If <a>shelf/shelf.ShelfResponse.ShelfResponse-forbidden.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.ShelfResponse.ShelfResponse-forbidden.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"notFound":{"name":"notFound","qualifiedName":"shelf/shelf.ShelfResponse.ShelfResponse-notFound","comment":"<p>Constructs a 404 Not Found response.</p>\n<p>This indicates that the server didn't find any resource matching the\nrequested URI.</p>\n<p><a>shelf/shelf.ShelfResponse.ShelfResponse-notFound.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's a <a>dart-core.String</a>,\n<a>shelf/shelf.ShelfResponse.ShelfResponse-notFound.encoding</a> is used to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to\nUTF-8.</p>\n<p>If <a>shelf/shelf.ShelfResponse.ShelfResponse-notFound.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.ShelfResponse.ShelfResponse-notFound.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"internalServerError":{"name":"internalServerError","qualifiedName":"shelf/shelf.ShelfResponse.ShelfResponse-internalServerError","comment":"<p>Constructs a 500 Internal Server Error response.</p>\n<p>This indicates that the server had an internal error that prevented it\nfrom fulfilling the request.</p>\n<p><a>shelf/shelf.ShelfResponse.ShelfResponse-internalServerError.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's <code>null</code> or not\npassed, a default error message is used. If it's a <a>dart-core.String</a>, <a>shelf/shelf.ShelfResponse.ShelfResponse-internalServerError.encoding</a> is\nused to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to UTF-8.</p>\n<p>If <a>shelf/shelf.ShelfResponse.ShelfResponse-internalServerError.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.ShelfResponse.ShelfResponse-internalServerError.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"body":{"name":"body","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"":{"name":"","qualifiedName":"shelf/shelf.ShelfResponse.ShelfResponse-","comment":"<p>Constructs an HTTP response with the given <a>shelf/shelf.ShelfResponse.ShelfResponse-.statusCode</a>.</p>\n<p><a>shelf/shelf.ShelfResponse.ShelfResponse-.statusCode</a> must be greater than or equal to 100.</p>\n<p><a>shelf/shelf.ShelfResponse.ShelfResponse-.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's <code>null</code> or not\npassed, a default error message is used. If it's a <a>dart-core.String</a>, <a>shelf/shelf.ShelfResponse.ShelfResponse-.encoding</a> is\nused to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to UTF-8.</p>\n<p>If <a>shelf/shelf.ShelfResponse.ShelfResponse-.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.ShelfResponse.ShelfResponse-.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"statusCode":{"name":"statusCode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"body":{"name":"body","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"read":{"name":"read","qualifiedName":"shelf/shelf.ShelfResponse.read","comment":"<p>Returns a <a>shelf/dart-async.Stream</a> representing the body of the response.</p>\n<p>This can only be called once per ShelfRequest.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"parameters":{},"annotations":[]},"readAsString":{"name":"readAsString","qualifiedName":"shelf/shelf.ShelfResponse.readAsString","comment":"<p>Returns a <a>shelf/dart-async.Future</a> that returns the body of the response as a String.</p>\n<p>If <a>shelf/shelf.ShelfResponse.readAsString.encoding</a> is passed, that's used to decode the response body.\nOtherwise the encoding is taken from the Content-Type header. If that\ndoesn't exist or doesn't have a \"charset\" parameter, UTF-8 is used.</p>\n<p>This calls <a>shelf/shelf.ShelfResponse.read</a> internally, which can only be called once per\nShelfRequest.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"encoding":{"name":"encoding","optional":true,"named":false,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"shelf/shelf.ShelfResponse.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>shelf/shelf.ShelfResponse.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"shelf/shelf.ShelfResponse.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"shelf/shelf.ShelfResponse.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>shelf/shelf.ShelfResponse.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>shelf/shelf.ShelfResponse.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"shelf/shelf.ShelfResponse.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"shelf/shelf.ShelfResponse.noSuchMethod","comment":"<p><a>shelf/shelf.ShelfResponse.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>shelf/shelf.ShelfResponse.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>shelf/shelf.ShelfResponse.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>shelf/shelf.ShelfResponse.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}