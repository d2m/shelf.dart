{"name":"ShelfRequest","qualifiedName":"shelf/shelf.ShelfRequest","comment":"<p>Represents an HTTP request to be processed by a Shelf application.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"contentLength":{"name":"contentLength","qualifiedName":"shelf/shelf.ShelfRequest.contentLength","comment":"<p>The contents of any Content-Length fields in the HTTP request. May be\n<code>null</code>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"pathInfo":{"name":"pathInfo","qualifiedName":"shelf/shelf.ShelfRequest.pathInfo","comment":"<p>The remainder of the <a>shelf/shelf.ShelfRequest.requestedUri</a> path designating the virtual\n\"location\" of the request's target within the handler.</p>\n<p><a>shelf/shelf.ShelfRequest.pathInfo</a> may be an empty string, if requestedUri targets the handler\nroot and does not have a trailing slash.</p>\n<p><a>shelf/shelf.ShelfRequest.pathInfo</a> is never null. If it is not empty, it will start with <code>/</code>.</p>\n<p><a>shelf/shelf.ShelfRequest.scriptName</a> and <a>shelf/shelf.ShelfRequest.pathInfo</a> combine to create a valid path that should\ncorrespond to the <a>shelf/shelf.ShelfRequest.requestedUri</a> path.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"queryString":{"name":"queryString","qualifiedName":"shelf/shelf.ShelfRequest.queryString","comment":"<p>The portion of the request URL that follows the \"?\", if any.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"method":{"name":"method","qualifiedName":"shelf/shelf.ShelfRequest.method","comment":"<p>The HTTP request method, such as \"GET\" or \"POST\".</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"scriptName":{"name":"scriptName","qualifiedName":"shelf/shelf.ShelfRequest.scriptName","comment":"<p>The initial portion of the <a>shelf/shelf.ShelfRequest.requestedUri</a> path that corresponds to the\nhandler.</p>\n<p><a>shelf/shelf.ShelfRequest.scriptName</a> allows a handler to know its virtual \"location\".</p>\n<p>If the handler corresponds to the \"root\" of a server, it will be an\nempty string, otherwise it will start with a <code>/</code></p>\n<p><a>shelf/shelf.ShelfRequest.scriptName</a> and <a>shelf/shelf.ShelfRequest.pathInfo</a> combine to create a valid path that should\ncorrespond to the <a>shelf/shelf.ShelfRequest.requestedUri</a> path.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"protocolVersion":{"name":"protocolVersion","qualifiedName":"shelf/shelf.ShelfRequest.protocolVersion","comment":"<p>The HTTP protocol version used in the request, either \"1.0\" or \"1.1\".</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"requestedUri":{"name":"requestedUri","qualifiedName":"shelf/shelf.ShelfRequest.requestedUri","comment":"<p>The original <a>dart-core.Uri</a> for the request.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Uri","inner":[]}],"annotations":[]},"headers":{"name":"headers","qualifiedName":"shelf/shelf.ShelfRequest.headers","comment":"<p>The HTTP headers.</p>\n<p>The value is immutable.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"pathSegments":{"name":"pathSegments","qualifiedName":"shelf/shelf.ShelfRequest.pathSegments","comment":"<p>Convenience property to access <a>shelf/shelf.ShelfRequest.pathInfo</a> data as a <a>dart-core.List</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"shelf/shelf.ShelfRequest.ShelfRequest-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"pathInfo":{"name":"pathInfo","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"queryString":{"name":"queryString","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"scriptName":{"name":"scriptName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"protocolVersion":{"name":"protocolVersion","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"contentLength":{"name":"contentLength","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"requestedUri":{"name":"requestedUri","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Uri","inner":[]}],"value":"null","annotations":[]},"headers":{"name":"headers","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"shelf/shelf.ShelfRequest.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>shelf/shelf.ShelfRequest.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"shelf/shelf.ShelfRequest.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"shelf/shelf.ShelfRequest.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>shelf/shelf.ShelfRequest.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>shelf/shelf.ShelfRequest.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"shelf/shelf.ShelfRequest.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"shelf/shelf.ShelfRequest.noSuchMethod","comment":"<p><a>shelf/shelf.ShelfRequest.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>shelf/shelf.ShelfRequest.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>shelf/shelf.ShelfRequest.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>shelf/shelf.ShelfRequest.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}